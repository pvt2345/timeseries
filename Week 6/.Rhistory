par(mfrow=c(2,1))
#plot
plot(moving_average_process, main='A moving average process of order 2', xlab='Time', ylab='', col='blue')
acf(moving_average_process, main='Corellogram of a moving average process of order 2')
avv
acv
helf(acv)
help(acv)
help(acf)
purely_random_process = ts(rnorm(100))
acf(purely_random_process, main='Correlogram of a purely random process')
(acf(purely_random_process, main='Correlogram of a purely random process'))[4]
plot(X)
set.seed(2016); N = 1000; phi=0.4;
Z = rnorm(N, 0, 1); X = NULL;
X[1] = Z[1]
for t in (2:N){
X[t] = Z[t] + phi*X[t-1]
}
plot(X)
set.seed(2016); N = 1000; phi=0.4;
Z = rnorm(N, 0, 1); X = NULL;
plot(X, (1:1000))
X[1] = Z[1]
for t in (2:N){
X[t] = Z[t] + phi*X[t-1]
}
plot(X, (1:1000))
Z = rnorm(N, 0, 1); X = NULL;
X[1] = Z[1]
for t in (2:N){
X[t] = Z[t] + phi*X[t-1]
}
X.ts = ts(X)
X[1] = Z[1]
for t in (2:N){
X[t] = Z[t] + phi*X[t-1]
}
set.seed(2016); N = 1000; phi=0.4;
Z = rnorm(N, 0, 1); X = NULL;
X[1] = Z[1]
for t in (2:N){
X[t] = Z[t] + phi*X[t-1]
}
for t in (2:N){
X[t] = Z[t] + phi*X[t-1];
}
set.seed(2016); N = 1000; phi=0.4;
Z = rnorm(N, 0, 1); X = NULL;
X[1] = Z[1]
for t in (2:N){
X[t] = Z[t] + phi*X[t-1];
}
set.seed(2016); N = 1000; phi=0.4;
Z = rnorm(N, 0, 1); X = NULL;
X[1] = Z[1]
for t in (2:N) {
X[t] = Z[t] + phi*X[t-1];
}
for t in (2:N) { X[t] = Z[t] + phi*X[t-1
for (t in 2:N) { X[t] = Z[t] + phi*X[t-1];}
X.ts = ts(X)
plot(X, (1:1000))
plot(X)
plot(X.ts)
plot(X.ts, main='AR(1), phi = .4')
X.acf = acf(X.ts, main="AR(1) ACF, phi 0 .4")
X.acf = acf(X.ts, main="AR(1) ACF, phi 0 .4")
par(mfrow=c(2,1))
plot(X.ts, main='AR(1), phi = .4')
X.acf = acf(X.ts, main="AR(1) ACF, phi 0 .4")
set.seed(2017)
X.ts = arima.sim(list(ar= C(.7, .2)), n = 1000)
par(mfrow = c(2,1))
set.seed(2017)
X.ts = arima.sim(list(ar= c(.7, .2)), n = 1000)
par(mfrow = c(2,1))
plot(X.ts, main='AR(2), phi= .7, .2')
X.acf = acf(X.ts, main='AR(2) ACF for phi = .7, .2')
set.seed(2017);
phi1 = .5;
phi2 = -.4;
X.ts = arima.sim(list(ar= c()), n = 1000);
par(mfrow = c(2,1));
plot(X.ts, main=paste('AR(2), phi=' phi1',' phi2));
plot(X.ts, main=paste('AR(2), phi=' phi1, ',', phi2));
plot(X.ts, main=paste("AR(2), phi=" phi1, ", ", phi2));
X.acf = acf(X.ts, main=paste("AR(2) ACF for phi =" phi1 ", " phi2))
plot(X.ts, main=paste("AR(2), phi=", phi1, ",", phi2));
X.acf = acf(X.ts, main=paste("AR(2) ACF for phi =", phi1, ",", phi2))
install.packages("isdals")
library(isdals)
data(bodyfat)
attach(bodyfat)
pairs(cbind(Fat,Triceps,Thigh, Midarm))
lm(Fat~Thigh)
predict(lm(Fat~Thigh))
library(isdals)
data(bodyfat)
attach(bodyfat)
pairs(cbind(Fat,Triceps,Thigh, Midarm))
Fat.hat = predict(lm(Fat~Thigh)) #dự đoán Fat theo Thigh sử dụng linear regression
Triceps.hat = predict(lm(Triceps~Thigh))
cor(Fat-Fat.hat, Triceps-Triceps.hat)
cor(Fat, Triceps)
help arima.sim
help(arima.sim)
T
F
set.seed(2017)
set.seed(2017)
sigma=4
phi=NULL
phi[1:2]=c(1/3,1/2)
phi
n=10000
ar.process=arima.sim(n,model=list(ar=c(1/3,1/2)), sd=4)
ar.process[1:5]
R[2,1]=r[1] # only diagonal entries are edited #rho(1)
r=NULL
r[1:2]=acf(ar.process, plot=F)$acf[2:3] #array start at 1, rho(0) == 1
r
R=matrix(1,2,2) # matrix of dimension 2 by 2, with entries all 1's.
R
R[1,2]=r[1] # only diagonal entries are edited #rho(1)
R[2,1]=r[1] # only diagonal entries are edited #rho(1)
View(R)
View(R)
b=matrix(r,nrow=2,ncol=1)# b- column vector with no entries
b
solve(R,b)
phi.hat=matrix(c(solve(R,b)[1,1], solve(R,b)[2,1]),2,1)
phi.hat
#phi.hat=matrix(c(solve(R,b)[1,1], solve(R,b)[2,1]),2,1)
phi.hat = solve(R, b)
phi.hat
c0=acf(ar.process, type='covariance', plot=F)$acf[1]
var.hat=c0*(1-sum(phi.hat*r))
var.hat
par(mfrow=c(3,1))
plot(ar.process, main='Simulated AR(2)')
acf(ar.process, main='ACF')
pacf(ar.process, main='PACF')
r = matrix(c(0.8, 0.6, 0.2), ncol=1, nrow =3)
r
B = r
b = r
View(R)
View(R)
View(R)
R = matrix(1, 3, 3)
b[11]
b1
b[1]
R[1,2] = b[1]
R[1,3] = b[2]
R[2,1] = b[1]
R[2,3] = b[1]
R[3,1] = b[2]
R[3,2] = b[1]
R
b
solve(R, b)
phi.hat = solve(R, b)
phi.hat*b
mul(phi.hat, b)
phi.hat %*% b
phi.hat.T %*% b
transpose(phi.hat) %*% b
t(phi.hat) %*% b
1 - ans
b = matrix(c(0.8, 0.6, 0.2), ncol=1, nrow =3)
R = matrix(1, 3, 3)
R[1,2] = b[1]
R[1,3] = b[2]
R[2,1] = b[1]
R[2,3] = b[1]
R[3,1] = b[2]
R[3,2] = b[1]
solve(R, b)
t(phi.hat) %*% b
1 - t(phi.hat) %*% b
c0*(1 - t(phi.hat) %*% b)
phi.hat = solve(R, b)
c0*(1 - t(phi.hat) %*% b)
View(phi.hat)
0.813*0.8 + 0.5*0.6 + -0.687*0.2
5*.813
c0 = 5
phi.hat = solve(R, b)
c0*(1 - t(phi.hat) %*% b)
library(astsa)
my.data=rec
# Plot rec
plot(rec, main='Recruitment time series', col='blue', lwd=3)
plot(discoveries, main = "Time Series of Number of Major
Scientific Discoveries in a Year")
stripchart(discoveries, method = stack, offset=.5, at=.15,
pch=19, main="Number of Discoveries Dotplot",
xlab="Number of Major Scientific Discoveries
in a Year", xlab="Frequency")
stripchart(discoveries, method = stack, offset=.5, at=.15,
pch=19, main="Number of Discoveries Dotplot",
xlab="Number of Major Scientific Discoveries
in a Year", ylab="Frequency")
stripchart(discoveries, method = stack, offset=.5, at=.15,
pch=19, main="Number of Discoveries Dotplot",
xlab="Number of Major Scientific Discoveries
in a Year", ylab="Frequency")
plot(discoveries, main = "Time Series of Number of Major
Scientific Discoveries in a Year")
stripchart(discoveries, method = stack, offset=.5, at=.15,
pch=19, main="Number of Discoveries Dotplot",
xlab="Number of Major Scientific Discoveries
in a Year", ylab="Frequency")
stripchart(discoveries, method = 'stack', offset=.5, at=.15,
pch=19, main="Number of Discoveries Dotplot",
xlab="Number of Major Scientific Discoveries
in a Year", ylab="Frequency")
plot(discoveries, main = "Time Series of Number of Major
Scientific Discoveries in a Year")
stripchart(discoveries, method = 'stack', offset=.5, at=.15,
pch=19, main="Number of Discoveries Dotplot",
xlab="Number of Major Scientific Discoveries
in a Year", ylab="Frequency")
par(mfcol = (2,1))
acf(discoveries, main = "ACF of Number of Major Scientific Discoveries in a Year")
acf(discoveries, type = "partial", main = main = "PACF of Number of Major Scientific Discoveries in a Year")
par(mfcol = (2,1))
acf(discoveries, main = "ACF of Number of Major Scientific Discoveries in a Year")
acf(discoveries, type = "partial", main = "PACF of Number of Major Scientific Discoveries in a Year")
par(mfcol = (2,1)
par(mfcol = c(2,1))
acf(discoveries, main = "ACF of Number of Major Scientific Discoveries in a Year")
acf(discoveries, type = "partial", main = "PACF of Number of Major Scientific Discoveries in a Year")
for i in 1:3{
for j in 1:3{
AIC(arima(discoveries, order=c(i, 0, j)))
}
}
for (i in 1:3){
for (j in 1:3){
AIC(arima(discoveries, order=c(i, 0, j)))
}
}
AIC(arima(discoveries, order = c(1,0,1)))
for (i in 1:3){
for (j in 1:3){
AIC(arima(discoveries, order=c(i, 0, j)))
}
}
library(astsa)
# read data to R variable
birth.data<-read.csv("daily-total-female-births-in-cal.csv")
# read data to R variable
birth.data<-read.csv("daily-total-female-births-in-cal.csv")
# read data to R variable
birth.data<-read.csv("D:\Study\Time Series\Week 5\daily-total-female-births-in-cal.csv")
# read data to R variable
birth.data<-read.csv("D:/Study/Time Series/Week 5/daily-total-female-births-in-cal.csv")
# pull out number of births column
number_of_births<-birth.data$Daily.total.female.births.in.California..1959
View(birth.data)
View(birth.data)
# use date format for dates
birth.data$Date <- as.Date(birth.data$Date, "%m/%d/%Y")
# plot the series
plot(number_of_births ~ birth.data$Date, type = "l",
main='Daily total female births in california, 1959',
ylab = 'Number of births', xlab='Date')
# Test for correlation
Box.test(number_of_births, lag = log(length(number_of_births)))
Box.test(number_of_births, lag = length(number_of_births))
# Test for correlation
Box.test(number_of_births, lag = log(length(number_of_births)))
source('D:/Study/Time Series/Week 5/DailyBirth.R', echo=TRUE)
#Box.test(number_of_births, lag = length(number_of_births))
# plot the differenced series
plot(diff(number_of_births) ~ birth.data$Date[1:364], type = "l",
main='Differenced series',
ylab = '', xlab='Date')
acf(diff(number_of_births), main='ACF of differenced data', 50)
Box.test(diff(number_of_births), lag = log(length(diff(number_of_births))))
e
pacf(diff(number_of_births), main='PACF of differenced data', 50)
acf(diff(number_of_births), main='ACF of differenced data', 50)
pacf(diff(number_of_births), main='PACF of differenced data', 50)
#MA1
model1<-arima(number_of_births, order=c(0,1,1))
SSE1<-sum(model1$residuals^2)
model1.test<-Box.test(model1$residuals, lag = log(length(model1$residuals)))
#MA2
model2<-arima(number_of_births, order=c(0,1,2))
SSE2<-sum(model2$residuals^2)
model2.test<-Box.test(model2$residuals, lag = log(length(model2$residuals)))
#ARIMA(7,1,1)
model3<-arima(number_of_births, order=c(7,1,1))
SSE3<-sum(model3$residuals^2)
model3.test<-Box.test(model3$residuals, lag = log(length(model3$residuals)))
#ARIMA(7,1,2)
model4<-arima(number_of_births, order=c(7,1,2))
SSE4<-sum(model4$residuals^2)
model4.test<-Box.test(model4$residuals, lag = log(length(model4$residuals)))
df<-data.frame(row.names=c('AIC', 'SSE', 'p-value'), c(model1$aic, SSE1, model1.test$p.value),
c(model2$aic, SSE2, model2.test$p.value), c(model3$aic, SSE3, model3.test$p.value),
c(model4$aic, SSE4, model4.test$p.value))
colnames(df)<-c('Arima(0,1,1)','Arima(0,1,2)', 'Arima(7,1,1)', 'Arima(7,1,2)')
format(df, scientific=FALSE)
sarima(number_of_births, 0,1,2,0,0,0)
library(datasets)
plot(Bjsales)
library(datasets)
plot(Bjsales)
plot(BJsales)
plot(diff(BJsales))
acf(diff(diff(BJsales)))
acf(diff(diff(BJsales)), type="partial")
acf(diff(diff(BJsales)))
acf(diff(diff(BJsales)), type="partial")
acf(diff(diff(BJsales)))
acf(diff(diff(BJsales)))
acf(diff(diff(BJsales)), type="partial") #
for(p in 1:4){
for(q in 1:2){
if(p+d+q<=6){
model<-arima(x=BJsales, order = c((p-1),d,(q-1)))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
d=2
for(p in 1:4){
for(q in 1:2){
if(p+d+q<=6){
model<-arima(x=BJsales, order = c((p-1),d,(q-1)))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
acf(diff(diff(BJsales)), type="partial") #AR(2)
model
acf(diff(diff(BJsales)), type="partial") #AR(2)
acf(diff(diff(BJsales)), type="partial") #AR(2)
acf(diff(diff(BJsales)), type="partial") #AR(2)
acf(diff(diff(BJsales)), type="partial") #AR(2)
acf(diff(diff(BJsales))) #MA(1)
acf(diff(diff(BJsales))) #MA(1)
acf(diff(diff(BJsales)), type="partial") #AR(2)
acf(diff(diff(BJsales))) #MA(1)
acf(diff(diff(BJsales)), type="partial") #AR(2)
acf(diff(diff(BJsales))) #MA(1)
acf(diff(diff(BJsales)), type="partial") #AR(2)
acf(diff(diff(BJsales))) #MA(1)
model = arima(BJsales, order=(0,2,1))
model = arima(BJsales, order=c(0,2,1))
model
acf(diff(diff(BJsales)), type="partial") #AR(3)
for(p in 1:4){
for(q in 1:2){
if(p+d+q<=8){
model<-arima(x=BJsales, order = c((p-1),d,(q-1)))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
library(astsa)
data = read.csv('monthly-milk-production-pounds-p.csv')
library(astsa)
data = read.csv('monthly-milk-production-pounds-p.csv')
#data__ = ts(diff(diff(data$Pounds), 12)) #1 nonss, 1 ss
data__ = diff(diff(milk), 12)
plot(data__)
milk = ts(data$Pounds) #keep original
#data__ = ts(diff(diff(data$Pounds), 12)) #1 nonss, 1 ss
data__ = diff(diff(milk), 12)
plot(data__)
acf(data__)
library(astsa)
cls
clc
clear()
clc()
cls()
setwd("D:/Study/Time Series/Week 6")
library(astsa)
data = read.csv('monthly-milk-production-pounds-p.csv')
Milk = data$Pounds
#data__ = ts(diff(diff(data$Pounds), 12)) #1 nonss, 1 ss
data__ = diff(diff(milk), 12)
plot(data__)
acf(data__)
pacf(data__)
milk = ts(data$Pounds) #keep original
#data__ = ts(diff(diff(data$Pounds), 12)) #1 nonss, 1 ss
data__ = diff(diff(milk), 12)
plot(data__)
acf(data__)
plot(data__)
acf(data__)
acf(data__, lag.max = 50) #
pacf(data__)
acf(data__, lag.max = 50) #MA(1) SMA(1)
d = 1
D = 1
for (p in 1:2){
for (p in 1:2){
for(q in 1:2){
for(i in 1:2){
for(j in 1:2){
if(p+d+q+i+D+j<=10){
model<-arima(x=milk, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),D,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,D,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
a
afs
}
for (p in 1:2){
for(q in 1:2){
for(i in 1:2){
for(j in 1:2){
if(p+d+q+i+D+j<=10){
model<-arima(x=milk, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),D,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,D,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
per = 12
for (p in 1:2){
for(q in 1:2){
for(i in 1:2){
for(j in 1:2){
if(p+d+q+i+D+j<=10){
model<-arima(x=milk, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),D,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,D,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
sarima(milk, 1, 1, 0, 0 ,1, 1, 12)
sarima(milk, 1, 1, 0, 0 ,1, 1, 12)
model<- arima(x=milk, order = c(1,1,0), seasonal = list(order=c(0,1,1), period=12))
plot(forecast(model))
library(forecas)
library(forecast)
install.packages("forecast")
library(forecast)
model<- arima(x=milk, order = c(1,1,0), seasonal = list(order=c(0,1,1), period=12))
plot(forecast(model))
forecast(model)
plot(USAccDeaths)
plot(data)
plot(data)
data = diff(USAccDeaths, 12)
plot(data)
data = diff(diff(USAccDeaths), 12)
plot(data)
plot(data)
par(mfrow=c(2,1))
acf(data)
pacf(data)
acf(data, lag.max = 50)
pacf(data, lag.max = 50) #q = 1, Q = 1
d =1
D =1
per = 12
for(p in 1:2){
for(q in 1:2){
for(i in 1:2){
for(j in 1:2){
if(p+d+q+i+D+j<=10){
model<-arima(x=USAccDeaths, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),D,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,D,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
sarima(USAccDeaths, 0, 1, 1, 0, 1, 1, 12)
sarima.for(USAccDeaths, 0, 1, 1, 0, 1, 1, 12)
plot(USAccDeaths)
sarima.for(USAccDeaths, 0, 1, 1, 0, 1, 1, 12)
sarima.for(USAccDeaths, 0, 1, 1, 0, 1, 1, 12, 1979)
sarima.for(USAccDeaths, 1979, 0, 1, 1, 0, 1, 1, 12)
sarima.for(USAccDeaths, 3, 0, 1, 1, 0, 1, 1, 12)
data = diff(USAccDeaths, 12)
plot(data)
data = diff(diff(USAccDeaths), 12)
plot(data)
par(mfrow=c(2,1))
acf(data, lag.max = 50) #q = 1, Q = 1
pacf(data, lag.max = 50) #p = 1, P = 1
