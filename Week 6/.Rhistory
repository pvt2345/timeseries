x = c(11, 14, 12, 15, 54)
x.summary
x.summary()
summary(x)
small.size.dataset=c(91,49,76,112,97,42,70, 100, 8, 112, 95, 90, 78, 62, 56, 94, 65, 58, 109, 70, 109, 91, 71, 76, 68, 62, 134, 57, 83, 66)
hist(small.size.dataset)
small.size.dataset
small.size.dataset(1)
small.size.dataset[1]
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data')
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data', Frequnency = F)
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data', freq=F)
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data', freq=F, col='green')
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data', freq=F, col='green')
lines(density(small.size.dataset))
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data', freq=F, col='green')
lines(density(small.size.dataset))
clc
clc()
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data', freq=F, col='green')
lines(density(small.size.dataset), col='red', lwd=5)
density(small.size.dataset)
hist(small.size.dataset, xlab = 'My data points', main = 'Histogram of my data', freq=F, col='green', breaks = 10)
lines(density(small.size.dataset), col = 'red', lwd=5)
set.seed =2016
Test_1_score = round(rnorm(50, 78, 10))
Test_1_score = round(rnorm(50, 70, 14))
Test_1_score = round(rnorm(50, 78, 10))
Test_2_score = round(rnorm(50, 70, 14))
set
set.seed
set.seed(2016)
seed
set.seed
Test_1.score
Test_1_score
Test_2_score
plot(Test_2_score~Test_1_score)
plot(Test_2_score~Test_1_score, xlab='Chim', ylab='Buom')
plot(Test_2_score~Test_1_score, xlab='Chim', ylab='Buom', main='Data')
q()
set.seed(2016)
Test_1_scores=round(rnorm(50, 78, 10)).
Test_1_scores=round(rnorm(50, 78, 10))
Test_2_scores=round(rnorm(50, 78, 14))
plot(Test_2_scores~Test_1_scores, main='Test scores for two exams (50 students)', xlab='Test_1_scores', ylab='Test 2 scores', col='blue')
load("D:\\Statistics\\summary")
q()
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
source('D:/Statistics/Slide/SARIMAForJJ.R')
install.packages("astsa")
source('D:/Statistics/Slide/SARIMAForJJ.R')
plot(jj, col='red')
jj
arima(jj, order = c(2, 0, 0)
arima(jj, order = c(2, 0, 0))
arima(jj, order = c(2, 0, 0))
plot(arima(x=jj, order=c(2,0,0)))
install.packages("RFacebook")
install.packages("Rfacebook")
install.packages("RCurl")
libary(RFacebook)
library(Rfacebook)
library(RCurl)
fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fb_oath = fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
me = getUsers("me", token=fb_oauth, private_info = TRUE)
fb_oath = fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fb_oath = fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fb_oath = fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fb_oath = fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fb_oath = fbOAuth(app_id = "559356677835859", app_secret = "1f0968f251e32c154149f9a6fea71747", extended_permissions = TRUE)
fb_oath = fbOAuth(app_id = "559356677835859", app_secret = "c88cd2dc789dba41e442e24f06824fb0", extended_permissions = TRUE)
fb_oath
X.ts = arima.sim(list(ar= c(phi1, phi2)), n = 1000);
phi1 = .5;
phi2 = -.4;
X.ts = arima.sim(list(ar= c(phi1, phi2)), n = 1000);
plot(X.ts, main=paste("AR(2), phi=", phi1, ",", phi2));
MPC = HSX[HSX$X.Ticker. == "MPC",]
MPC = read.csv("MPC.csv")
MPC = HSX[HSX$X.Ticker. == "MPC",]
MPC = read.csv("MPC.csv")
MPC$X.High. = round(rev(High), digits = 2)
MPC_Close =MPC$X.Close.
setwd("D:/20181/Time Series/Week 6")
MPC = HSX[HSX$X.Ticker. == "MPC",]
MPC = read.csv("MPC.csv")
MPC_High =MPC$X.High.
MPC_Low =MPC$X.Low.
MPC_Close =MPC$X.Close.
MPC_Open =MPC$X.Open.
ts_MPC_Close = ts(rev(MPC_Close))
for (p in 1:3){
for(q in 1:2){
for(i in 1:3){
for(j in 1:2){
if(p+d+q+i+D+j < 10){
model<-arima(x=ts_MPC_Close, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),D,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
#aic = log(sse/n) + (n + 2*(p + d + q + i + D + j - 4))/n
cat(p-1,d,q-1,i-1,D,j-1,per, 'AIC=',model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
d = 1
D = 1
per = 90
for (p in 1:3){
for(q in 1:2){
for(i in 1:3){
for(j in 1:2){
if(p+d+q+i+D+j < 10){
model<-arima(x=ts_MPC_Close, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),D,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
#aic = log(sse/n) + (n + 2*(p + d + q + i + D + j - 4))/n
cat(p-1,d,q-1,i-1,D,j-1,per, 'AIC=',model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
library(astsa)
model = sarima(ts_MPC_Close, 2,1,1,1,1,2,90)
X.ts = sim_sarima(n = 250, model = list(ar=c(phi1, phi2), iorder = 0, ma = c(0.5, 0.2)), period = 90, seasonal= list(ar=c(0.2), siorder = 1), sigma = 0.2)
library(sarima)
X.ts = sim_sarima(n = 250, model = list(ar=c(phi1, phi2), iorder = 0, ma = c(0.5, 0.2)), period = 90, seasonal= list(ar=c(0.2), siorder = 1), sigma = 0.2)
Close = X.ts - min(X.ts) + 5
plot(ts(Close))
plot(ts(Close))
High = Close + Z_High
Low = Close - Z_High
Open = Close + Z_High
Z_High = rnorm(mean = 0.2, sd = 0.02)
High = Close + Z_High
Z_High = rnorm(mean = 0.2, sd = 0.02)
High = Close + Z_High
Z_High = rnorm(n = 250, mean = 0.2, sd = 0.02)
High = Close + Z_High
Z_High = rnorm(n = 250, mean = 0.2, sd = 0.02)
Low = Close - Z_High
Z_High = rnorm(n = 250, mean = 0, sd = 0.02)
Open = Close + Z_High
plot(ts(Close))
MPC$X.High. = round(rev(High), digits = 2)
MPC$X.Close. = round(rev(Close), digits = 2)
MPC$X.Open. =  round(rev(Open), digits = 2)
MPC$X.Low. = round(rev(Low), digits = 2)
write.csv(MPC, "MPC.csv")
write.csv(MPC, "MPC.csv")
MPC_Close =MPC$X.Close.
ts_MPC_Close = ts(rev(MPC_Close))
plot(ts_MPC_Close)
acf(diff_ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 1
acf(ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 0
pacf(diff_ts_MPC_Close, lag.max = 100) #pacf 32, AR <= 2 SAR <= 2
pacf(ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 0
#sarima(1,0,1,1,1,0)
X.ts = sim_sarima(n = 250, model = list(ar=c(phi1), iorder = 0, ma = c(0.2)), period = 90, seasonal= list(ar=c(0.2), siorder = 1), sigma = 0.2)
Close = X.ts - min(X.ts) + 5
plot(ts(Close))
Z_High = rnorm(n = 250, mean = 0, sd = 0.02)
High = Close + Z_High
Z_High = rnorm(n = 250, mean = 0, sd = 0.02)
Low = Close - Z_High
Z_High = rnorm(n = 250, mean = 0.2, sd = 0.02)
High = Close + Z_High
Z_High = rnorm(n = 250, mean = 0.2, sd = 0.02)
Low = Close - Z_High
Z_High = rnorm(n = 250, mean = 0, sd = 0.02)
Open = Close + Z_High
MPC$X.High. = round(rev(High), digits = 2)
MPC$X.Close. = round(rev(Close), digits = 2)
MPC$X.Open. =  round(rev(Open), digits = 2)
MPC$X.Low. = round(rev(Low), digits = 2)
write.csv(MPC, "MPC.csv")
MPC_High =MPC$X.High.
MPC_Low =MPC$X.Low.
MPC_Close =MPC$X.Close.
MPC_Open =MPC$X.Open.
ts_MPC_Close = ts(rev(MPC_Close))
plot(ts_MPC_Close)
acf(diff_ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 1
pacf(ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 0
#sarima(1,0,1,1,1,0)
X.ts = sim_sarima(n = 250, model = list(ar=c(phi1), iorder = 0, ma = c(0.2)), period =30, seasonal= list(ar=c(0.2), siorder = 1), sigma = 0.2)
Close = X.ts - min(X.ts) + 5
plot(ts(Close))
Z_High = rnorm(n = 250, mean = 0, sd = 0.02)
Open = Close + Z_High
Z_High = rnorm(n = 250, mean = 0.2, sd = 0.02)
High = Close + Z_High
Z_High = rnorm(n = 250, mean = 0.2, sd = 0.02)
Low = Close - Z_High
MPC$X.High. = round(rev(High), digits = 2)
MPC$X.Close. = round(rev(Close), digits = 2)
MPC$X.Open. =  round(rev(Open), digits = 2)
MPC$X.Low. = round(rev(Low), digits = 2)
write.csv(MPC, "MPC.csv")
MPC_High =MPC$X.High.
MPC_Low =MPC$X.Low.
MPC_Close =MPC$X.Close.
MPC_Open =MPC$X.Open.
ts_MPC_Close = ts(rev(head(MPC_Close,250)))
plot(ts_MPC_Close)
acf(diff_ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 1
pacf(ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 0
acf(ts_MPC_Close, lag.max = 100) #SMA 32, MA <= 1, SMA <= 0
d = 0
D = 1
per = 30
for (p in 1:3){
for(q in 1:2){
for(i in 1:3){
for(j in 1:2){
if(p+d+q+i+D+j < 10){
model<-arima(x=ts_MPC_Close, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),D,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
#aic = log(sse/n) + (n + 2*(p + d + q + i + D + j - 4))/n
cat(p-1,d,q-1,i-1,D,j-1,per, 'AIC=',model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model = sarima(ts_MPC_Close, 1,0,1,1,1,1,30)
View(sarima)
View(sarima)
View(sarima)
model<- arima(x=ts_MPC_Close, order = c(1,0,1), seasonal = list(order=c(1,1,1), period=30))
plot(forecast(model))
library(forecast)
plot(forecast(model))
model = astsa::sarima(ts_MPC_Close, 1,0,1,1,1,1,30)
plot(forecast(model))
model<- arima(x=ts_MPC_Close, order = c(1,0,1), seasonal = list(order=c(1,1,1), period=30))
plot(forecast(model))
forcast(model, 1)
forecast(model, h = 3)
forecast(model, h = 3)$forecast
forecast(model, h = 3)$Forecast
forecast(model, h = 3)
a = forecast(model, h = 3)
a
a$x
a$residuals
a$series
forecast(model, h = 1)
forecast(model, h = 1)[1]
forecast(model, h = 1)$Point
forecast(fit)
forecast(model)
a = forecast(model)
a
a$mean
a$mean[1]
plot(forecast(model), main = "Predict for MPC using SARIMA(1,0,1,1,1,1,30)")
